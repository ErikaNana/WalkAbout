General Notes
-------------
need to extend SherlockFragmentActivity so can use Fragments

Using Google Maps Android API
-----------------------------
-need to obtain API key
	-retrieve info about app's certificate
	-register a project in the Google APIs Console and add the Maps API as a service for the project
	-request one or more keys
	-add key to application and begin development
-specify settings in the Application Manifest
-Add map to new/existing Android project

Using Google Maps for this Application
--------------------------------------
-incorporate a Google Maps map in the application
-provide basic map utilities such as My Location button and Zoom controls
-we will not be calling Google Maps app directly
	-rather, implement own MapFragment in application and use Google's services to maintain it
	
Difference between Google Maps API and Google Maps Android API
---------------------------------------------------------------
Google Maps Android API is a child of Google Maps API
	-maintained specifically for using Google Maps services in Android devices
Google Maps API
	-represents collection of APIs related to using GoogleMaps services
	-the primary Google Maps API is the Javascript web-based version that allows for
	embedding and manipulating Google Maps in web pages
		-that is the version that many websites use to display Google Maps in a web browser
		
API Key
-------
In the Google Console site
	-contains info about who owns the key, when it was activated and which Android
	applications it may be used for, as well as the key itself
	
Using SupportMapFragment
-----------------------
Google Maps Android API v2 are contained inside MapFragments
-MapFragment only works for API 12 or higher
	-using Android Support library, can utilize the MapFragment
	functionality through a class called SupportMapFragment that works
	for API versions below 12
	
Error: Unable to instantiate activity ComponentInfo
----------------------------------------------------
To fix:
	-since extending FragmentActivity
		-Right click project
		-Properties
		-Java Build Path
		-Order and Export tab
		-check Android Private Libraries
		
Using Location Services
-----------------------
The Android System provides services for determining the current location of the device
-the framework for working with these location based services lives under the android.location package
-useful classes
	-LocationManager
		-Provides an interface for the location-based services
		-use to obtain location information
	-LocationProvider
		-these are classes that provide updates on the current location of the device
		-there exists a LocationProvider for each different technology that determines location
			-GPS LocationProvider
			-Network LocationProvider
		-each LocationProvider specifies criteria that must be satisfied in order for it to be used
			-example
				-GPS LocationProvider requires that the device have GPS hardware and that it be enabled
	-Criteria
		-allows you to programmatically outline criteria you would like from a LocationProvider
			-example
				-accuracy
				-power consumption
				-altitude reporting
				-speed reporting
				-monetary cost
		-you can then set up and give an instance of this class to the LocationManager and allow it 
		to choose the LocationProvider that best matches your criteria
	-LocationListener
		-interface that defines call backs for different events that are generated by LocationProviders
		-these can be registered with a particular LocationProvider to receive updates when the location
		changes or the state of the LocationProvider changes
	-Location
		-A data object containing location based information
		-generally contains latitude and longitude as well as a date and timestamp containing the time at
		which the location was determined
		-might also contain elevation, speed and heading information
	-Geocoder
		-A utility class for Geo-Coding, which can transform addresses to GPS coordinates and back
		-other geo-based utility classes provide functionality for addresses and some classes for monitoring the status
		of the GPS satellites the device is locked onto, among other things
		
-in general
	-usually query the LocationManager for the information you are seeking
		-can use it to check the current status of a LocationProvider
		-check the last known location reported by a LocationProvider
		-can register to receive updates from a LocationProvider
	-to receive updates on location information directly from a LocationProvider, you need to implement the
	LocationListener interface and register yourself with the LocationProvider
	
Refreshing ActionBar
--------------------
-is always onscreen and it is not reconstructed upon returning to WalkAbout application
	
Retrieving GPS Location Information
------------------------------------
Monitor GPS location information by making the WalkAbout Activity register itself with the GPS LocationProvider
when the location changes
-before the WalkAbout Activity class can register itself with the GPS LocationProvider, it must
implement the android.location.LocationListener interface
-then implement a Start/Stop MenuItem that will toggle the WalkAbout Activity between activity-recording
and recording-stopped states
	-while in the active-recording state
		-the WalkAbout Activity will be registered to receive
		updates from the GPS LocationProvider
		-As the WalkAbout Activity receives notices about location changes, it will re-center
		its MapView about the new location
		-it will store changes in location as longitude-latitude coordinates in an ArrayList
		-the start/stop MenuItem will display the word "stop"to indicate that clicking
		 the MenuItem will cause the WalkAbout Activity to switch to the recording stopped
		 state
	-in recording stopped state
		-WalkAbout Activity will no longer be registered to receive updates from the GPS
		LocationProvider
		-Will display Start to switch to recording state
		-When the user switches from the recording-stopped state to the actively-recording
		state, the ArrayList used to record changes in location should be cleared
-Note:
	-when Application starts up, it is by default in the recording stopped state

Camera for Google Map
------------------------
The view of the map is represented as a camera
-properties of the camera can be modified
	-location
		-latitude and longitude of the point the camera is looking at
		-this is not the location of the camera itself
		-this is the point in space that camera sits at/is moved to
	-zoom
		-the scale of the view of the map
		-the higher the zoom value, the closer the camera is moved to the location it is looking
		at (and therefore the closer-up the map seems)
	-bearing
		-the horizontal orientation of the camera, and part of the rotation of the camera
		-if you grabbed the camera where it was and twisted it left or right that would change
		the orientation of the camera horizontally
		-the compass is a metric standard of maintaining bearing in Google Maps (just like
		every other map system out there)
	-tilt
		-the other half of the rotation of the camera relative to its location
		-pretend the camera sits on a half-sphere centered over the location
			-you can move the camera anywhere along that half-sphere and it will still look
			at that same location (the half sphere will still be centered over that location)
			but you will see that location and its surroundings from a different viewing angle
-In the rendering system OpenGL the camera is moved and the world stays still

Manipulating the Camera for Google Maps
--------------------------------------
use CameraUpdate and CameraUpdateFactory
CameraUpdateFactory
	-makes CameraUpdate objects that we can use to change the map's camera
	-can use this class to modify any of the camera's properties
-Two ways to update Camera
	-move
		-makes the Camera update and "jump" immediately
		CameraUpdateryFactory.moveCamera()
	-animate
		-makes the camera update smoothly
		CameraUpdateFactory.animateCamera()
			-moves the center of the screen to the designated location on the Google Map
			-all the other camera properties remain the same
			
Shapes
------
-Polyline
	-series of liens that are drawn between certain LatLng points on a Google Map
	
Utilizing the Camera
--------------------
Two primary ways to take pictures
	-By accessing the Camera API
	-starting and capturing the result of a camera Intent
-Store pictures in SD card
	-since not all devices have the capacity for an SD card
	-use a method for retrieving a device-specific storage path
		-that way, if there is an SD card that can be accessed and written to then it will
		be used
		-but if not then some other device-specific path will be written to instead
		
		
android:required = "false"
--------------------------
tells Google Play Store that application uses a camera does not require it for usage		

Process of taking pictures in application
-----------------------------------------
-Run application
-Start recording
-Click "Take Picture" menu item
-Launch Camera via intent
	-Take a picture
	-Exit Camera
-Handle Camera return
	-Save picture to storage
	